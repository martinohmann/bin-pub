#!/bin/bash
#
# custom sysinfo. made for arch, works on debian
# too (with some drawbacks). others: haven't checked.
#
# author: Martin Ohmann <martin@mohmann.de>
#

# colors
reset=$(tput sgr0)
fg_black=$(tput setaf 0)
fg_red=$(tput setaf 1)
fg_green=$(tput setaf 2)
fg_yellow=$(tput setaf 3)
fg_white=$(tput setaf 7)

# window manager names
wmnames="dwm fluxbox openbox blackbox xfwm4 metacity kwin icewm pekwm fvwm \
	awesome wmaker stumpwm musca i3 xmonad ratpoison scrotwm spectrwm wmfs wmii \
	beryl subtle e16 enlightenment sawfish emerald monsterwm dminiwm compiz \
  herbstluftwm"
compositors="xcompmgr compton"

term="$TERM"

format_time_span() {
  local t=$1
  local y=$((t/60/60/24/365))
  local d=$((t/60/60/24%365))
  local h=$((t/60/60%24))
  local m=$((t/60%60))
  local s=$((t%60))
	# if y > 1, show years, days
  # else show days, hours minutes seconds
  [[ $y == 1 ]] && printf '%d year' $y
  [[ $y > 1 ]] && printf '%d years' $y
  [[ $y > 0 && $d > 0 ]] && printf ' '
  [[ $d == 1 ]] && printf '%d day' $d
  [[ $d > 1 ]] && printf '%d days' $d
  [[ $y == 0 && $d > 0 ]] && printf ' '
  [[ $y == 0 && $h > 0 ]] && printf '%dh ' $h
  [[ $y == 0 && $m > 0 ]] && printf '%dm ' $m
  [[ $y == 0 ]] && printf '%ds\n' $s
	[[ $y > 0 ]] && printf '\n'
}

print_packages() {
	if which pacman > /dev/null 2>&1; then
		pacman -Qq | wc -l
	fi
}

print_updates() {
	local count=0

	if which pacman > /dev/null 2>&1; then
		count=$(pacman -Qqu --dbpath /tmp/.localsync 2> /dev/null | wc -l)
		#count=$(pacman -Qqu | wc -l)
	fi

	[ $count -gt 0 ] && echo -ne "$count"
}

print_install_date() {
	local install_date install_seconds

	if [ -f /var/log/pacman.log ]; then
		install_date=$(awk 'NR==1 { print substr($1, 2) }' /var/log/pacman.log)
		install_seconds=$(($(date +%s) - $(date --date="${install_date}" +%s)))
		printf "%s (%s ago)" "$install_date" "$(format_time_span $install_seconds)" 
	fi
}

print_window_manager() {
	local wm
	local	user_id="$(id -u ${USER})"
	
	for w in $wmnames; do
		if pgrep -U "$user_id" "$w" > /dev/null 2>&1; then
			wm="$w"
			break
		fi
	done

	if [ ! -z $wm ]; then
		for c in $compositors; do
			if pgrep -U "$user_id" "$c" > /dev/null 2>&1; then
				wm="${wm} with ${c}"
				break
			fi
		done
	fi
	echo -ne "${wm:-}"
}

print_uptime() {
	local uptime=$(cut -d" " -f1 /proc/uptime)
	echo -ne "$(format_time_span ${uptime%.*})"
}

print_mem_usage() {
	local prefix
	local out=$(free -m)
	local used=$(echo "$out" | awk '/^Mem/{ printf "%d", $2-$4-$6 }')
	local total=$(echo "$out" | awk '/^Mem/{ printf "%d", $2 }')
	local used_perc=$((used*100/total))

	if [ $used_perc -ge 75 ]; then
		prefix="${fg_red}"
	elif [ $used_perc -gt 50 ]; then
		prefix="${fg_yellow}"
	elif [ $used_perc -le 50 ]; then
		prefix="${fg_green}"
	fi

	echo -ne "${prefix}${used}MB${reset} of ${total}MB"
}

print_disk_usage() { # $1: mountpoint or partition e.g. "/home, /dev/sda1"
	local prefix used total used_perc
	local out=$(df -h "$1")
	local mount_point=$(echo "$out" | awk 'NR==2 { print $6 }')

	if ! [ -z "$mount_point" ]; then
		used=$(echo "$out" | awk 'NR==2 { print $3 }')
		total=$(echo "$out" | awk 'NR==2 { print $2 }')
		used_perc=$(echo "$out" | awk 'NR==2 { print substr($5, 0, length($5)-1) }')

		if [ $used_perc -ge 75 ]; then
			prefix="${fg_red}"
		elif [ $used_perc -gt 66 ]; then
			prefix="${fg_yellow}"
		elif [ $used_perc -le 66 ]; then
			prefix="${fg_green}"
		fi

		echo -ne "${prefix}${used}${reset} of ${total} (${mount_point})"
	fi
}

print_info_line() { # $1: key, $2: value
	local line='____________________'

	if [ $# -lt 1 ]; then
		printf "%b  │%b\n" "$fg_black" "$reset"
	elif [[ $# -ge 2 && ! -z $2  ]]; then
		printf "%b  │ %b>%b %s %b%s %b%s%b\n" "$fg_black" "$fg_white" \
			"$reset" "$1" "$fg_black" "${line:${#1}}" "$reset" "$2" "$reset"
	fi
}

print_sysinfo() {
	# this is here since print_disk_usage seems to be slow sometimes.
	# we want to have all the info displayed at the same time
	printf "\npreparing sysinfo...\r"

	# get sysinfo
	os=$(lsb_release -d | sed 's/^Description:\t*//')
	hostname=$(hostname)
	kernel="$(uname -m) $(uname -r)"
	shell=$(basename "$SHELL")
	cpu=$(grep -m 1 "^model name" /proc/cpuinfo | sed 's/^model name\t*: *//')
	mounted_disks=$(mount -t ext3,ext4,vfat,ntfs,fuseblk | awk '{ printf "%s ", $1 }')
	disks=

	# the mounted partitions/usbs/something
	for dev in $mounted_disks; do
		disks+="$(print_info_line "$dev" "$(print_disk_usage "$dev")")\n"
	done

	# the rest
	install_date=$(print_install_date)
	packages=$(print_packages)
	updates=$(print_updates)
	uptime=$(print_uptime)
	wm=$(print_window_manager)
	mem=$(print_mem_usage)

	# whitespace is used to overwrite remains of "preparing sysinfo..."
	printf "%b  ┌─                \n" "$fg_black"

	print_info_line "os" "$os"
	print_info_line "kernel" "$kernel"
	print_info_line "hostname" "$hostname"
	print_info_line
	print_info_line "install date" "$install_date"
	print_info_line "packages" "$packages"
	print_info_line "updates available" "$updates"
	print_info_line "uptime" "$uptime"
	print_info_line
	print_info_line "wm" "$wm"
	print_info_line "shell" "$shell"
	print_info_line "terminal" "$term"
	print_info_line
	print_info_line "cpu" "$cpu"
	print_info_line "mem" "$mem"
	printf "$disks"

	printf "%b  └─%b\n\n" "$fg_black" "$reset"
}

print_sysinfo
